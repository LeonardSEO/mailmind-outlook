{"version":3,"file":"app.8f3e2b07ea63c1f22125.js","mappings":"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","sources":["webpack:///./components/App.tsx","webpack:///./index.tsx"],"sourcesContent":["/* global Office */\nimport * as React from 'react';\nimport {\n    Stack,\n    IStackTokens,\n    TextField,\n    PrimaryButton,\n    IconButton,\n    MessageBar,\n    MessageBarType,\n    Spinner,\n    SpinnerSize,\n    Text,\n    Panel,\n    initializeIcons\n} from '@fluentui/react';\nimport OpenAI from 'openai';\n\ninterface AppProps {\n    title: string;\n    isOfficeInitialized: boolean;\n}\n\ninterface IMessage {\n    role: 'user' | 'assistant';\n    content: string;\n}\n\ninterface IAppState {\n    messages: IMessage[];\n    currentMessage: string;\n    isLoading: boolean;\n    error: string | null;\n    emailContext: {\n        subject: string;\n        body: string;\n        sender: string;\n        recipients: string[];\n    } | null;\n    isPanelOpen: boolean;\n    apiKey: string;\n    model: string;\n    language: string;\n}\n\nconst stackTokens: IStackTokens = {\n    childrenGap: 10\n};\n\nclass App extends React.Component<AppProps, IAppState> {\n    private messagesEndRef = React.createRef<HTMLDivElement>();\n    officeMailBoxItem = Office.context.mailbox.item;\n    openai: OpenAI | null = null;\n\n    constructor(props: AppProps) {\n        super(props);\n        this.state = {\n            messages: [],\n            currentMessage: '',\n            isLoading: false,\n            error: null,\n            emailContext: null,\n            isPanelOpen: false,\n            apiKey: localStorage.getItem('openrouterApiKey') || '',\n            model: localStorage.getItem('model') || '',\n            language: localStorage.getItem('language') || 'English'\n        };\n\n        initializeIcons();\n        this.initializeOpenAI();\n        this.loadEmailContext();\n    }\n\n    scrollToBottom = () => {\n        this.messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    };\n\n    componentDidUpdate(_prevProps: AppProps, prevState: IAppState) {\n        if (prevState.messages.length !== this.state.messages.length) {\n            this.scrollToBottom();\n        }\n    }\n\n    initializeOpenAI = () => {\n        if (this.state.apiKey) {\n            this.openai = new OpenAI({\n                baseURL: 'https://openrouter.ai/api/v1',\n                apiKey: this.state.apiKey,\n                defaultHeaders: {\n                    'HTTP-Referer': window.location.origin,\n                    'X-Title': 'MailMind',\n                },\n                dangerouslyAllowBrowser: true\n            });\n        }\n    };\n\n    loadEmailContext = async () => {\n        try {\n            this.setState({ isLoading: true });\n            \n            const subject = this.officeMailBoxItem.subject || '';\n            \n            let body = '';\n            await new Promise((resolve) => {\n                this.officeMailBoxItem.body.getAsync(Office.CoercionType.Text, (result) => {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        body = result.value;\n                    }\n                    resolve(null);\n                });\n            });\n\n            const sender = this.officeMailBoxItem.from ? this.officeMailBoxItem.from.emailAddress : '';\n            const recipients = this.officeMailBoxItem.to ? \n                this.officeMailBoxItem.to.map(r => r.emailAddress) : \n                [];\n\n            this.setState({\n                emailContext: {\n                    subject,\n                    body,\n                    sender,\n                    recipients\n                },\n                isLoading: false\n            });\n\n            this.setState(prevState => ({\n                messages: [\n                    ...prevState.messages,\n                    {\n                        role: 'assistant',\n                        content: 'Hi! I\\'m your AI email assistant. I can help you with:' +\n                            '\\n• Writing and improving emails' +\n                            '\\n• Summarizing email threads' +\n                            '\\n• Extracting key information' +\n                            '\\n• Translating content' +\n                            '\\n• Suggesting responses' +\n                            '\\nWhat would you like me to help you with?' +\n                            '\\n\\nTip: Click the settings icon to configure your OpenRouter API key and model.'\n                    }\n                ]\n            }));\n\n        } catch (error) {\n            this.setState({\n                error: 'Failed to load email context',\n                isLoading: false\n            });\n        }\n    };\n\n    handleMessageChange = (_event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        this.setState({ currentMessage: newValue || '' });\n    };\n\n    handleReply = async (messageContent: string) => {\n        try {\n            // Get the current item\n            const item = Office.context.mailbox.item;\n            \n            if (!item) {\n                this.setState({ error: 'No active email compose window found' });\n                return;\n            }\n\n            // Extract the reply content between --- markers\n            const matches = messageContent.match(/---\\n([\\s\\S]*?)\\n---/);\n            if (!matches || !matches[1]) {\n                this.setState({ error: 'No properly formatted reply found. Reply should be between --- markers.' });\n                return;\n            }\n\n            const replyContent = matches[1].trim();\n\n            // Create a new message with the reply, preserving line breaks\n            Office.context.mailbox.displayNewMessageForm({\n                toRecipients: item.to?.map(recipient => recipient.emailAddress) || [],\n                subject: `Re: ${item.subject || ''}`,\n                htmlBody: replyContent.replace(/\\n/g, '<br>')\n            });\n\n        } catch (error) {\n            this.setState({\n                error: 'Failed to insert reply: ' + (error instanceof Error ? error.message : 'Unknown error')\n            });\n        }\n    };\n\n    handleSettingsSave = () => {\n        const { apiKey, model, language } = this.state;\n        localStorage.setItem('openrouterApiKey', apiKey);\n        localStorage.setItem('model', model);\n        localStorage.setItem('language', language);\n        this.initializeOpenAI();\n        this.setState({ isPanelOpen: false });\n    };\n\n    handleSendMessage = async () => {\n        const { currentMessage, emailContext, model, language } = this.state;\n        \n        if (!currentMessage.trim() || !this.openai || !model) {\n            this.setState({ error: 'Please configure your API key and model in settings first.' });\n            return;\n        }\n\n        this.setState(prevState => ({\n            messages: [\n                ...prevState.messages,\n                { role: 'user', content: currentMessage }\n            ],\n            currentMessage: '',\n            isLoading: true,\n            error: null\n        }));\n\n        try {\n            const systemPrompt = `You are an expert email assistant. Your task is to help compose professional and effective email responses in ${language}.\n\nCurrent email context:\nSubject: ${emailContext?.subject}\nFrom: ${emailContext?.sender}\nTo: ${emailContext?.recipients.join(', ')}\n\nEmail Body:\n${emailContext?.body}\n\nGuidelines:\n- Keep responses concise and professional\n- Maintain appropriate tone based on context\n- Format response in plain text suitable for email\n- Focus on addressing the key points\n- Be direct but polite\n- Always respond in ${language}\n\nPlease provide assistance based on this context and the user's request.`;\n\n            const completion = await this.openai.chat.completions.create({\n                model: model,\n                messages: [\n                    { role: 'system', content: systemPrompt },\n                    ...this.state.messages.map(m => ({ role: m.role, content: m.content })),\n                    { role: 'user', content: currentMessage }\n                ],\n                temperature: 0.2,\n                top_p: 0.9,\n                max_tokens: 300,\n                frequency_penalty: 0.5,\n                presence_penalty: 0.5\n            });\n\n            const response = completion.choices[0].message.content;\n\n            this.setState(prevState => ({\n                messages: [\n                    ...prevState.messages,\n                    { role: 'assistant', content: response || 'Sorry, I couldn\\'t generate a response.' }\n                ],\n                isLoading: false\n            }));\n\n        } catch (error) {\n            this.setState({\n                error: 'Failed to get AI response. Please check your API key and model name.',\n                isLoading: false\n            });\n        }\n    };\n\n    render() {\n        const { \n            messages, \n            currentMessage, \n            isLoading, \n            error, \n            emailContext,\n            isPanelOpen,\n            apiKey,\n            model,\n            language\n        } = this.state;\n\n        if (!this.props.isOfficeInitialized) {\n            return (\n                <Stack horizontalAlign=\"center\" verticalAlign=\"center\" styles={{ root: { height: '100vh' } }}>\n                    <Spinner size={SpinnerSize.large} label=\"Loading Office.js...\" />\n                </Stack>\n            );\n        }\n\n        return (\n            <Stack \n                tokens={stackTokens}\n                styles={{\n                    root: {\n                        padding: '16px 20px',\n                        height: '100vh',\n                        backgroundColor: '#ffffff'\n                    }\n                }}\n            >\n                {/* Header */}\n                <Stack.Item>\n                    <Stack horizontal horizontalAlign=\"space-between\" verticalAlign=\"center\" styles={{ root: { marginBottom: 8 } }}>\n                        <Stack horizontal tokens={{ childrenGap: 12 }} verticalAlign=\"center\">\n                            <Text variant=\"large\" styles={{ root: { fontWeight: 600, color: '#616161' } }}>Current Email</Text>\n                        </Stack>\n                        <IconButton\n                            iconProps={{ iconName: 'Settings' }}\n                            title=\"Settings\"\n                            ariaLabel=\"Settings\"\n                            styles={{\n                                root: {\n                                    color: '#616161'\n                                }\n                            }}\n                            onClick={() => this.setState({ isPanelOpen: true })}\n                        />\n                    </Stack>\n                </Stack.Item>\n\n                {/* Settings Panel */}\n                <Panel\n                    isOpen={isPanelOpen}\n                    onDismiss={() => this.setState({ isPanelOpen: false })}\n                    headerText=\"Email Assistant Settings\"\n                    closeButtonAriaLabel=\"Close\"\n                    styles={{\n                        main: {\n                            boxShadow: '0 8px 32px rgba(0,0,0,0.12)'\n                        }\n                    }}\n                >\n                    <Stack tokens={{ childrenGap: 20 }}>\n                        <TextField\n                            label=\"OpenRouter API Key\"\n                            value={apiKey}\n                            onChange={(_ev, newValue) => this.setState({ apiKey: newValue || '' })}\n                            type=\"password\"\n                            styles={{\n                                fieldGroup: {\n                                    borderRadius: 4\n                                }\n                            }}\n                        />\n                        <TextField\n                            label=\"Model Name\"\n                            value={model}\n                            onChange={(_ev, newValue) => this.setState({ model: newValue || '' })}\n                            placeholder=\"e.g., openai/gpt-4, anthropic/claude-3-opus\"\n                            styles={{\n                                fieldGroup: {\n                                    borderRadius: 4\n                                }\n                            }}\n                        />\n                        <TextField\n                            label=\"Preferred Language\"\n                            value={language}\n                            onChange={(_ev, newValue) => this.setState({ language: newValue || 'English' })}\n                            placeholder=\"e.g., English, Dutch, French\"\n                            styles={{\n                                fieldGroup: {\n                                    borderRadius: 4\n                                }\n                            }}\n                        />\n                        <PrimaryButton \n                            text=\"Save Settings\" \n                            onClick={this.handleSettingsSave}\n                            styles={{\n                                root: {\n                                    borderRadius: 4,\n                                    marginTop: 10\n                                }\n                            }}\n                        />\n                    </Stack>\n                </Panel>\n\n                {/* Messages Container */}\n                <Stack.Item grow styles={{ root: { overflowY: 'auto', margin: '16px -20px', padding: '0 20px' } }}>\n                    <Stack tokens={{ childrenGap: 16 }}>\n                        {emailContext && (\n                            <Stack.Item>\n                                <Stack \n                                    tokens={{ childrenGap: 8 }} \n                                    styles={{ \n                                        root: { \n                                            padding: 16,\n                                            backgroundColor: '#f8f9fa',\n                                            borderRadius: 8,\n                                            border: '1px solid #e9ecef'\n                                        } \n                                    }}\n                                >\n                                    <Text variant=\"mediumPlus\" styles={{ root: { fontWeight: 600, color: '#495057' } }}>Current Email</Text>\n                                    <Text styles={{ root: { color: '#495057' } }}>Subject: {emailContext.subject}</Text>\n                                    <Text styles={{ root: { color: '#495057' } }}>From: {emailContext.sender}</Text>\n                                    <Text styles={{ root: { color: '#495057' } }}>To: {emailContext.recipients.join(', ')}</Text>\n                                </Stack>\n                            </Stack.Item>\n                        )}\n                        {messages.map((msg, index) => (\n                            <Stack.Item key={index}>\n                                <Stack tokens={{ childrenGap: 8 }}>\n                                    <Text \n                                        variant=\"mediumPlus\" \n                                        styles={{ \n                                            root: { \n                                                fontWeight: 600,\n                                                color: msg.role === 'user' ? '#1a73e8' : '#34a853'\n                                            } \n                                        }}\n                                    >\n                                        {msg.role === 'user' ? 'You: ' : 'Assistant: '}\n                                    </Text>\n                                    <Stack \n                                        styles={{ \n                                            root: { \n                                                backgroundColor: msg.role === 'user' ? '#f8f9fa' : '#ffffff',\n                                                padding: 16,\n                                                borderRadius: 8,\n                                                border: '1px solid #e9ecef'\n                                            } \n                                        }}\n                                    >\n                                        <Text styles={{ root: { whiteSpace: 'pre-wrap', color: '#212529' } }}>\n                                            {msg.content}\n                                        </Text>\n                                        {msg.role === 'assistant' && (\n                                            <PrimaryButton\n                                                text=\"Use as Reply\"\n                                                onClick={() => this.handleReply(msg.content)}\n                                                styles={{\n                                                    root: {\n                                                        marginTop: 12,\n                                                        borderRadius: 4,\n                                                        backgroundColor: '#34a853',\n                                                        border: 'none'\n                                                    }\n                                                }}\n                                            />\n                                        )}\n                                    </Stack>\n                                </Stack>\n                            </Stack.Item>\n                        ))}\n                        <div ref={this.messagesEndRef} />\n                        {isLoading && (\n                            <Stack.Item>\n                                <Spinner size={SpinnerSize.small} styles={{ root: { padding: 20 } }} />\n                            </Stack.Item>\n                        )}\n                        {error && (\n                            <Stack.Item>\n                                <MessageBar \n                                    messageBarType={MessageBarType.error}\n                                    styles={{\n                                        root: {\n                                            borderRadius: 4\n                                        }\n                                    }}\n                                >\n                                    {error}\n                                </MessageBar>\n                            </Stack.Item>\n                        )}\n                    </Stack>\n                </Stack.Item>\n\n                {/* Input Area */}\n                <Stack.Item>\n                    <Stack horizontal tokens={{ childrenGap: 8 }}>\n                        <Stack.Item grow>\n                            <TextField\n                        multiline\n                                rows={2}\n                                value={currentMessage}\n                                onChange={this.handleMessageChange}\n                                placeholder=\"Type your message...\"\n                                styles={{\n                                    fieldGroup: {\n                                        borderRadius: 4\n                                    }\n                                }}\n                            />\n                        </Stack.Item>\n                        <PrimaryButton\n                            text=\"Send\"\n                            onClick={this.handleSendMessage}\n                            disabled={isLoading || !currentMessage.trim()}\n                            styles={{\n                                root: {\n                                    borderRadius: 4,\n                                    height: 'auto',\n                                    alignSelf: 'flex-end'\n                                }\n                            }}\n                        />\n                    </Stack>\n                </Stack.Item>\n            </Stack>\n        );\n    }\n}\n\nexport default App;","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom/client';\r\nimport { initializeIcons } from '@fluentui/react/lib/Icons';\r\nimport App from './components/App';\r\n\r\nimport '@fluentui/react/dist/css/fabric.min.css';\r\n\r\ninitializeIcons();\r\n\r\nlet isOfficeInitialized = false;\r\n\r\nconst title = 'MailMind';\r\n\r\nconst container = document.getElementById('container');\r\nconst root = ReactDOM.createRoot(container!);\r\n\r\nconst render = (Component: typeof App) => {\r\n    root.render(\r\n        <React.StrictMode>\r\n            <Component title={title} isOfficeInitialized={isOfficeInitialized} />\r\n        </React.StrictMode>\r\n    );\r\n};\r\n\r\n/* Initial render showing a progress bar */\r\nrender(App);\r\n\r\n/* Initialize Office */\r\nOffice.onReady(() => {\r\n    isOfficeInitialized = true;\r\n    render(App);\r\n});"],"names":["stackTokens","childrenGap","props","messagesEndRef","React","createRef","officeMailBoxItem","Office","context","mailbox","item","openai","scrollToBottom","current","scrollIntoView","behavior","initializeOpenAI","state","apiKey","baseURL","defaultHeaders","window","location","origin","dangerouslyAllowBrowser","loadEmailContext","this","setState","isLoading","subject","Promise","resolve","body","getAsync","CoercionType","Text","result","status","AsyncResultStatus","Succeeded","value","sender","from","emailAddress","recipients","to","map","r","emailContext","prevState","messages","role","content","error","handleMessageChange","_event","newValue","currentMessage","handleReply","messageContent","matches","match","replyContent","trim","displayNewMessageForm","toRecipients","recipient","htmlBody","replace","Error","message","handleSettingsSave","model","language","localStorage","setItem","isPanelOpen","handleSendMessage","systemPrompt","join","chat","completions","create","m","temperature","top_p","max_tokens","frequency_penalty","presence_penalty","completion","choices","getItem","initializeIcons","componentDidUpdate","_prevProps","length","render","isOfficeInitialized","Stack","tokens","styles","root","padding","height","backgroundColor","Item","horizontal","horizontalAlign","verticalAlign","marginBottom","variant","fontWeight","color","IconButton","iconProps","iconName","title","ariaLabel","onClick","Panel","isOpen","onDismiss","headerText","closeButtonAriaLabel","main","boxShadow","TextField","label","onChange","_ev","type","fieldGroup","borderRadius","placeholder","PrimaryButton","text","marginTop","grow","overflowY","margin","border","msg","index","key","whiteSpace","ref","Spinner","size","SpinnerSize","small","MessageBar","messageBarType","MessageBarType","multiline","rows","disabled","alignSelf","large","Component","App","container","document","getElementById","ReactDOM","createRoot","StrictMode","onReady"],"sourceRoot":""}